import { existsSync, readFileSync } from 'node:fs';
import { join, relative } from 'node:path';
// Class to represent all of the information we need to know about a package in a workspace.
export class Package {
    constructor(path, pathWorkspace) {
        this.path = path;
        this.pathWorkspace = pathWorkspace;
        this.pathPackageJson = join(path, 'package.json');
        const packageJsonContents = readFileSync(this.pathPackageJson, 'utf8');
        this.packageJsonEndsInNewline = packageJsonContents.endsWith('\n');
        this.packageJson = JSON.parse(packageJsonContents);
    }
    get name() {
        if (this.packageJson.workspaces && !this.packageJson.name) {
            return '(Root)';
        }
        if (!this.packageJson.name) {
            throw new Error(`${this.pathPackageJson} missing \`name\``);
        }
        return this.packageJson.name;
    }
    // Relative to workspace root.
    get pathRelative() {
        return relative(this.pathWorkspace, this.path);
    }
    get workspacePatterns() {
        if (this.packageJson.workspaces) {
            if (Array.isArray(this.packageJson.workspaces)) {
                return this.packageJson.workspaces;
            }
            if (this.packageJson.workspaces.packages) {
                return this.packageJson.workspaces.packages;
            }
        }
        return [];
    }
    static exists(path) {
        const packageJsonPath = join(path, 'package.json');
        return existsSync(packageJsonPath);
    }
    static some(packages, callback) {
        return packages.some((package_) => callback(package_));
    }
    static comparator(package1, package2) {
        return package1.name.localeCompare(package2.name);
    }
}
