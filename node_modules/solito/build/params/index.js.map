{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/params/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\n// From https://gist.github.com/nandorojo/052887f99bb61b54845474f324aa41cc\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Platform } from 'react-native'\n\nimport { useNavigation } from '../router/use-navigation'\nimport Router from './router'\nimport { useRoute } from './use-route'\nimport { useRouter } from './use-router'\n\nfunction useStable<T>(value: T) {\n  const ref = useRef(value)\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n\nfunction useStableCallback<T extends (...args: any[]) => any>(\n  callback: T | undefined\n): T {\n  const callbackRef = useRef(callback)\n\n  useEffect(() => {\n    callbackRef.current = callback\n  })\n\n  // https://github.com/facebook/react/issues/19240\n  return useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, [])\n}\n\ntype Config<\n  Props extends Record<string, unknown>,\n  Required extends boolean,\n  ParsedType,\n  InitialValue\n> = (Required extends false\n  ? {\n      parse?: (value?: string | string[]) => ParsedType\n    }\n  : {\n      parse: (value?: string | string[]) => ParsedType\n    }) & {\n  stringify?: (value: ParsedType) => string\n  initial: InitialValue\n  paramsToClearOnSetState?: (keyof Props)[]\n}\n\ntype Params<\n  Props extends Record<string, unknown> = Record<string, string>,\n  Name extends Extract<keyof Props, string> = Extract<keyof Props, string>,\n  NullableUnparsedParsedType extends Props[Name] | undefined =\n    | Props[Name]\n    | undefined,\n  ParseFunction extends\n    | undefined\n    | ((\n        value?: string | string[]\n      ) => NonNullable<NullableUnparsedParsedType>) = (\n    value?: string | string[]\n  ) => NonNullable<NullableUnparsedParsedType>,\n  InitialValue = NullableUnparsedParsedType | undefined,\n  ParsedType = InitialValue extends undefined\n    ? NullableUnparsedParsedType\n    : ParseFunction extends undefined\n    ? NullableUnparsedParsedType\n    : NonNullable<NullableUnparsedParsedType>\n> = NonNullable<ParsedType> extends string\n  ?\n      | [name: Name, config: Config<Props, false, ParsedType, InitialValue>]\n      | [name: Name]\n  : [name: Name, config: Config<Props, true, ParsedType, InitialValue>]\n\ntype Returns<\n  Props extends Record<string, unknown> = Record<string, string>,\n  Name extends keyof Props = keyof Props,\n  NullableUnparsedParsedType extends Props[Name] | undefined =\n    | Props[Name]\n    | undefined,\n  ParseFunction extends\n    | undefined\n    | ((\n        value?: string | string[]\n      ) => NonNullable<NullableUnparsedParsedType>) = (\n    value?: string | string[]\n  ) => NonNullable<NullableUnparsedParsedType>,\n  InitialValue = NullableUnparsedParsedType | undefined,\n  ParsedType = InitialValue extends undefined\n    ? NullableUnparsedParsedType\n    : ParseFunction extends undefined\n    ? NullableUnparsedParsedType\n    : NonNullable<NullableUnparsedParsedType>\n> = readonly [\n  state: ParsedType | InitialValue,\n  setState: (value: ParsedType, options?: SetStateOptions) => void\n]\n\ntype SetStateOptions = {\n  /**\n   * Override whether this function calls `Router.push` or `Router.replace`.\n   *\n   * By default, `Router.push` is called if the query parameter already exists in the URL.\n   */\n  webBehavior?: 'push' | 'replace'\n}\n\nexport function createParam<\n  Props extends Record<string, unknown> = Record<string, string>\n>() {\n  function useParam<\n    Name extends Extract<keyof Props, string>,\n    NullableUnparsedParsedType extends Props[Name] | undefined =\n      | Props[Name]\n      | undefined,\n    ParseFunction extends\n      | undefined\n      | ((\n          value?: string | string[]\n        ) => NonNullable<NullableUnparsedParsedType>) = (\n      value?: string | string[]\n    ) => NonNullable<NullableUnparsedParsedType>,\n    InitialValue = NullableUnparsedParsedType | undefined,\n    ParsedType = InitialValue extends undefined\n      ? NullableUnparsedParsedType\n      : ParseFunction extends undefined\n      ? NullableUnparsedParsedType\n      : NonNullable<NullableUnparsedParsedType>\n  >(\n    ...[name, maybeConfig]: Params<\n      Props,\n      Name,\n      NullableUnparsedParsedType,\n      ParseFunction,\n      InitialValue,\n      ParsedType\n    >\n  ): Returns<\n    Props,\n    Name,\n    NullableUnparsedParsedType,\n    ParseFunction,\n    InitialValue,\n    ParsedType\n  > {\n    const {\n      parse = (value?: string | string[]) => value,\n      initial,\n      stringify,\n      paramsToClearOnSetState,\n    } = maybeConfig || {}\n    const nextRouter = useRouter()\n    const nativeRoute = useRoute()\n    const nativeNavigation = useNavigation()\n    const nativeStateFromParams = (nativeRoute?.params as any)?.[\n      name\n    ] as ParsedType\n\n    const [nativeStateFromReact, setNativeStateFromReact] = useState<\n      ParsedType | InitialValue\n    >(() => nativeStateFromParams ?? (initial as InitialValue))\n\n    const setNativeStateFromParams = useCallback((value: ParsedType) => {\n      nativeNavigation?.setParams({\n        [name]: value,\n      })\n    }, [])\n\n    const nativeState = nativeRoute\n      ? nativeStateFromParams\n      : nativeStateFromReact\n    const setNativeState = nativeRoute\n      ? setNativeStateFromParams\n      : setNativeStateFromReact\n\n    const stableStringify = useStable(stringify)\n    const stableParse = useStableCallback(parse)\n    const stableParamsToClear = useStable(paramsToClearOnSetState)\n\n    const initialValue = useRef(initial)\n    const hasSetState = useRef(false)\n\n    const setState = useCallback(\n      (value: ParsedType, options?: SetStateOptions) => {\n        hasSetState.current = true\n        const { pathname, query } = Router\n        const newQuery = { ...query }\n        if (value != null && (value as any) !== '') {\n          if (stableStringify.current) {\n            newQuery[name] = stableStringify.current(value)\n          } else {\n            newQuery[name] = value as any\n          }\n        } else {\n          delete newQuery[name]\n        }\n\n        if (stableParamsToClear.current) {\n          for (const paramKey of stableParamsToClear.current) {\n            delete newQuery[paramKey as string]\n          }\n        }\n\n        const willChangeExistingParam = query[name] && newQuery[name]\n\n        let action = willChangeExistingParam ? Router.replace : Router.push\n\n        if (options?.webBehavior) {\n          action = Router[options.webBehavior]\n        }\n\n        action(\n          {\n            pathname,\n            query: newQuery,\n          },\n          undefined,\n          {\n            shallow: true,\n          }\n        )\n      },\n      [name, stableStringify, stableParamsToClear]\n    )\n\n    const webParam = nextRouter?.query?.[name as string]\n\n    const state = useMemo<ParsedType>(() => {\n      let state: ParsedType\n      if (webParam === undefined && !hasSetState.current) {\n        state = initialValue.current as any\n      } else {\n        state = stableParse(webParam) as ParsedType\n      }\n      return state\n    }, [stableParse, webParam])\n\n    if (Platform.OS !== 'web') {\n      if (!nativeRoute) {\n        console.error(\n          `[solito] useParam('${\n            name as string\n          }') called when there is no React Navigation route available. In a future version, this will throw an error. Please fix this by only calling useParam() inside of a React Navigation route. For now, Solito will fallback to using React state.`\n        )\n      }\n      return [nativeState, setNativeState]\n    }\n\n    return [state, setState]\n  }\n\n  type UpdateOptions = {\n    web?: {\n      replace?: boolean\n    }\n  }\n\n  function useUpdateParams(): (\n    props: Partial<Props>,\n    options?: UpdateOptions\n  ) => void {\n    const nativeNavigation = useNavigation()\n\n    const setNativeStateFromParams = useCallback((value: Partial<Props>) => {\n      nativeNavigation?.setParams(value)\n    }, [])\n\n    const setWebState = useCallback(\n      (value: Partial<Props>, options?: UpdateOptions) => {\n        const { pathname, query } = Router\n        const newQuery = { ...query, ...value }\n        for (const key in value) {\n          if (value[key] == null || value[key] === '') {\n            delete newQuery[key]\n          }\n        }\n\n        const action = options?.web?.replace ? Router.replace : Router.push\n\n        action(\n          {\n            pathname,\n            query: newQuery,\n          },\n          undefined,\n          {\n            shallow: true,\n          }\n        )\n      },\n      []\n    )\n\n    return Platform.select({\n      web: setWebState,\n      default: setNativeStateFromParams,\n    })\n  }\n\n  function useParams(): {\n    params: Props\n    setParams: (value: Partial<Props>, options?: SetStateOptions) => void\n  } {\n    if (Platform.OS !== 'web') {\n      const nativeRoute = useRoute()\n      const nativeNavigation = useNavigation()\n\n      return {\n        params: nativeRoute?.params as Props,\n        setParams: useCallback(\n          (params) => nativeNavigation?.setParams(params),\n          [nativeNavigation]\n        ),\n      }\n    }\n    const nextRouter = useRouter()\n\n    return {\n      params: nextRouter?.query as Props,\n      setParams: useCallback((params, options) => {\n        const { pathname, query } = Router\n        const newQuery = { ...query, ...params }\n        for (const key in params) {\n          if (params[key] == null || params[key] === '') {\n            delete newQuery[key]\n          }\n        }\n\n        const action = Router[options?.webBehavior ?? 'push']\n\n        action(\n          {\n            pathname,\n            query: newQuery,\n          },\n          undefined,\n          {\n            shallow: true,\n          }\n        )\n      }, []),\n    }\n  }\n\n  return {\n    useParam,\n    useUpdateParams,\n    useParams,\n  }\n}\n"]}