{"version":3,"file":"image.web.js","sourceRoot":"","sources":["../../../src/image/expo/image.web.tsx"],"names":[],"mappings":"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","sourcesContent":["// Add client directive once we implement onLayout\nimport {\n  ImageContentPosition,\n  ImageContentPositionObject,\n  ImageContentPositionString,\n  ImageContentPositionValue,\n} from 'expo-image'\nimport NextImage from 'next/image'\nimport { forwardRef } from 'react'\nimport { Image, ImageResizeMode, StyleSheet } from 'react-native'\n// @ts-expect-error missing types\nimport { unstable_createElement } from 'react-native-web'\n\n// import useElementLayout from 'react-native-web/dist/modules/useElementLayout'\n// import { mergeRefs } from '../../helpers/merge-refs'\nimport { useSolitoImageContext } from '../context'\nimport { SolitoImageProps } from '../image.types'\n\nconst SolitoImage = forwardRef<Image, SolitoImageProps>(function SolitoImage(\n  { contentFit, resizeMode = 'contain', fill, style, onLayout, ...props },\n  ref\n) {\n  const { loader } = useSolitoImageContext()\n  // add back onLayout when this is solved: https://github.com/vercel/next.js/discussions/43267\n  // const localRef = useRef<Image>(null)\n  // useElementLayout(\n  //   // https://github.com/necolas/react-native-web/blob/master/packages/react-native-web/src/exports/View/index.js#L88\n  //   localRef,\n  //   onLayout\n  // )\n  return unstable_createElement(NextImage, {\n    ...props,\n    // ref: mergeRefs([ref, localRef]),\n    loader: props.loader ?? loader,\n    fill,\n    style: [\n      fill && StyleSheet.absoluteFill,\n      {\n        objectFit: contentFit || objectFitFromResizeMode(resizeMode),\n        objectPosition: getObjectPositionFromContentPositionObject(\n          resolveContentPosition(props.contentPosition)\n        ),\n      },\n      style,\n    ],\n  })\n})\n\nexport default SolitoImage\n\n// FORKED FROM EXPO IMAGE\n\n/**\n * It resolves a stringified form of the `contentPosition` prop to an object,\n * which is the only form supported in the native code.\n *\n * https://github.com/expo/expo/blob/baea6e76d0c6f865885aa2fb1c8f7732c119c300/packages/expo-image/src/utils.ts#L53\n */\nfunction resolveContentPosition(\n  contentPosition?: ImageContentPosition\n): ImageContentPositionObject {\n  if (typeof contentPosition === 'string') {\n    const contentPositionStringMappings: Record<\n      ImageContentPositionString,\n      ImageContentPositionObject\n    > = {\n      center: { top: '50%', left: '50%' },\n      top: { top: 0, left: '50%' },\n      right: { top: '50%', right: 0 },\n      bottom: { bottom: 0, left: '50%' },\n      left: { top: '50%', left: 0 },\n      'top center': { top: 0, left: '50%' },\n      'top right': { top: 0, right: 0 },\n      'top left': { top: 0, left: 0 },\n      'right center': { top: '50%', right: 0 },\n      'right top': { top: 0, right: 0 },\n      'right bottom': { bottom: 0, right: 0 },\n      'bottom center': { bottom: 0, left: '50%' },\n      'bottom right': { bottom: 0, right: 0 },\n      'bottom left': { bottom: 0, left: 0 },\n      'left center': { top: '50%', left: 0 },\n      'left top': { top: 0, left: 0 },\n      'left bottom': { bottom: 0, left: 0 },\n    }\n    const contentPositionObject = contentPositionStringMappings[contentPosition]\n\n    if (!contentPositionObject) {\n      console.warn(\n        `[expo-image]: Content position \"${contentPosition}\" is invalid`\n      )\n      return contentPositionStringMappings.center\n    }\n    return contentPositionObject\n  }\n  return contentPosition ?? { top: '50%', left: '50%' }\n}\nfunction ensureUnit(value: string | number) {\n  const trimmedValue = String(value).trim()\n  if (trimmedValue.endsWith('%')) {\n    return trimmedValue\n  }\n  return `${trimmedValue}px`\n}\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never\n\nfunction getObjectPositionFromContentPositionObject(\n  contentPosition?: ImageContentPositionObject\n): string {\n  const resolvedPosition = { ...contentPosition } as Record<\n    KeysOfUnion<ImageContentPositionObject>,\n    ImageContentPositionValue\n  >\n  if (!resolvedPosition) {\n    return '50% 50%'\n  }\n  if (resolvedPosition.top == null && resolvedPosition.bottom == null) {\n    resolvedPosition.top = '50%'\n  }\n  if (resolvedPosition.left == null && resolvedPosition.right == null) {\n    resolvedPosition.left = '50%'\n  }\n\n  return (\n    (['top', 'bottom', 'left', 'right'] as const)\n      .map((key) => {\n        if (key in resolvedPosition) {\n          return `${key} ${ensureUnit(resolvedPosition[key])}`\n        }\n        return ''\n      })\n      .join(' ') || '50% 50%'\n  )\n}\n// END FORKED FROM EXPO IMAGE\n\nconst objectFitFromResizeMode = (resizeMode: ImageResizeMode) => {\n  if (resizeMode === 'cover') {\n    return 'cover'\n  }\n  if (resizeMode === 'contain') {\n    return 'contain'\n  }\n  if (resizeMode === 'stretch') {\n    return 'fill'\n  }\n  if (resizeMode === 'center') {\n    return 'none'\n  }\n\n  throw new Error(`[solito/image] Invalid resizeMode: ${resizeMode}`)\n}\n"]}