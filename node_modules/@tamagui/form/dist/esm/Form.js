import { jsx } from "react/jsx-runtime";
import {
  Stack,
  composeEventHandlers,
  styled,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { cloneElement } from "react";
const FORM_NAME = "Form";
const FormFrame = styled(Stack, {
  name: FORM_NAME,
  tag: "form"
});
const [createFormContext] = createContextScope(FORM_NAME);
const [FormProvider, useFormContext] = createFormContext(FORM_NAME);
const TRIGGER_NAME = "FormTrigger";
const FormTriggerFrame = styled(Stack, {
  name: TRIGGER_NAME
});
const FormTrigger = FormTriggerFrame.styleable(
  (props, forwardedRef) => {
    const { __scopeForm, children, ...triggerProps } = props;
    const context = useFormContext(TRIGGER_NAME, __scopeForm);
    return /* @__PURE__ */ jsx(
      FormTriggerFrame,
      {
        tag: "button",
        ...triggerProps,
        children: triggerProps.asChild ? cloneElement(children, { disabled: triggerProps.disabled }) : children,
        ref: forwardedRef,
        onPress: composeEventHandlers(props.onPress, context.onSubmit)
      }
    );
  }
);
function FormComponent({
  onSubmit,
  ...props
}) {
  return /* @__PURE__ */ jsx(FormProvider, { scope: props.__scopeForm, onSubmit, children: /* @__PURE__ */ jsx(FormFrame, { ...props, onSubmit: (e) => e.preventDefault() }) });
}
const Form = withStaticProperties(FormFrame.extractable(FormComponent), {
  Trigger: FormTrigger
});
export {
  Form,
  FormFrame,
  FormProvider,
  FormTrigger,
  useFormContext
};
//# sourceMappingURL=Form.js.map
