"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Popper_exports = {};
__export(Popper_exports, {
  Popper: () => Popper,
  PopperAnchor: () => PopperAnchor,
  PopperArrow: () => PopperArrow,
  PopperContent: () => PopperContent,
  PopperContentFrame: () => PopperContentFrame,
  PopperProvider: () => PopperProvider,
  createPopperScope: () => createPopperScope,
  usePopperContext: () => usePopperContext
});
module.exports = __toCommonJS(Popper_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_core = require("@tamagui/core");
var import_create_context = require("@tamagui/create-context");
var import_floating = require("@tamagui/floating");
var import_get_size = require("@tamagui/get-size");
var import_stacks = require("@tamagui/stacks");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
const POPPER_NAME = "Popper";
const [createPopperContext, createScope] = (0, import_create_context.createContextScope)(POPPER_NAME);
const createPopperScope = createScope;
const [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
function Popper(props) {
  const {
    __scopePopper,
    children,
    size,
    strategy = "absolute",
    placement = "bottom",
    stayInFrame,
    allowFlip
  } = props;
  const [isMounted, setIsMounted] = React.useState(false);
  (0, import_core.useIsomorphicLayoutEffect)(() => {
    setIsMounted(true);
  }, []);
  const anchorRef = React.useRef();
  const [arrowEl, setArrow] = React.useState(null);
  const [arrowSize, setArrowSize] = React.useState(0);
  const arrowRef = React.useRef();
  const floating = (0, import_floating.useFloating)({
    strategy,
    placement,
    sameScrollView: false,
    // this only takes effect on native
    middleware: [
      stayInFrame ? (0, import_floating.shift)(typeof stayInFrame === "boolean" ? {} : stayInFrame) : null,
      allowFlip ? (0, import_floating.flip)(typeof allowFlip === "boolean" ? {} : allowFlip) : null,
      arrowEl ? (0, import_floating.arrow)({ element: arrowEl }) : null,
      arrowSize ? (0, import_floating.offset)(arrowSize) : null
    ].filter(Boolean)
  });
  const { refs, middlewareData } = floating;
  const composedArrowRefs = (0, import_compose_refs.useComposedRefs)(arrowRef, setArrow);
  (0, import_core.useIsomorphicLayoutEffect)(() => {
    floating.reference(anchorRef.current);
  }, [anchorRef]);
  if (import_core.isWeb) {
    React.useEffect(() => {
      if (!(refs.reference.current && refs.floating.current)) {
        return;
      }
      return (0, import_floating.autoUpdate)(refs.reference.current, refs.floating.current, floating.update);
    }, [floating.update, refs.floating, refs.reference]);
  } else {
    const dimensions = (0, import_react_native.useWindowDimensions)();
    const [keyboardOpen, setKeyboardOpen] = React.useState(false);
    React.useEffect(() => {
      const showSubscription = import_react_native.Keyboard.addListener("keyboardDidShow", () => {
        setKeyboardOpen(true);
      });
      const hideSubscription = import_react_native.Keyboard.addListener("keyboardDidHide", () => {
        setKeyboardOpen(false);
      });
      return () => {
        showSubscription.remove();
        hideSubscription.remove();
      };
    }, []);
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      floating.update();
    }, [dimensions, keyboardOpen]);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    PopperProvider,
    {
      scope: __scopePopper,
      anchorRef,
      size,
      arrowRef: composedArrowRefs,
      arrowStyle: middlewareData.arrow,
      onArrowSize: setArrowSize,
      isMounted,
      ...floating,
      children
    }
  );
}
const ANCHOR_NAME = "PopperAnchor";
const PopperAnchor = import_stacks.YStack.extractable(
  React.forwardRef(function PopperAnchor2(props, forwardedRef) {
    const { __scopePopper, virtualRef, ...anchorProps } = props;
    const { anchorRef, getReferenceProps } = usePopperContext(ANCHOR_NAME, __scopePopper);
    const ref = React.useRef(null);
    const composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, ref, anchorRef);
    if (virtualRef) {
      return null;
    }
    const stackProps = {
      ref: composedRefs,
      ...anchorProps
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_stacks.YStack, { ...getReferenceProps ? getReferenceProps(stackProps) : stackProps });
  })
);
const CONTENT_NAME = "PopperContent";
const PopperContentFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: true
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperContent = React.forwardRef(
  function PopperContent2(props, forwardedRef) {
    const { __scopePopper, ...contentProps } = props;
    const { strategy, placement, floating, x, y, getFloatingProps, size, isMounted } = usePopperContext(CONTENT_NAME, __scopePopper);
    const contentRefs = (0, import_compose_refs.useComposedRefs)(floating, forwardedRef);
    const contents = React.useMemo(() => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        PopperContentFrame,
        {
          "data-placement": placement,
          "data-strategy": strategy,
          size: contentProps.size || size,
          ...contentProps
        },
        "popper-content-frame"
      );
    }, [placement, strategy, props]);
    if (!isMounted) {
      return null;
    }
    const frameProps = {
      ref: contentRefs,
      x: x || 0,
      y: y || 0,
      position: strategy
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_stacks.YStack,
      {
        animateOnly: ["transform"],
        ...getFloatingProps ? getFloatingProps(frameProps) : frameProps,
        children: contents
      }
    );
  }
);
const ARROW_NAME = "PopperArrow";
const PopperArrowFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperArrowOuterFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: -1,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
const PopperArrow = PopperArrowFrame.styleable(
  function PopperArrow2(propsIn, forwardedRef) {
    var _a, _b;
    const props = (0, import_core.useProps)(propsIn);
    const {
      __scopePopper,
      offset: offset2,
      size: sizeProp,
      borderWidth = 0,
      ...arrowProps
    } = props;
    const context = usePopperContext(ARROW_NAME, __scopePopper);
    const sizeVal = sizeProp ?? context.size;
    const sizeValResolved = (0, import_core.getVariableValue)((0, import_get_size.stepTokenUpOrDown)("space", sizeVal, -2, [2]));
    const size = +sizeValResolved;
    const { placement } = context;
    const refs = (0, import_compose_refs.useComposedRefs)(context.arrowRef, forwardedRef);
    const x = ((_a = context.arrowStyle) == null ? void 0 : _a.x) || 0;
    const y = ((_b = context.arrowStyle) == null ? void 0 : _b.y) || 0;
    const primaryPlacement = placement ? placement.split("-")[0] : "top";
    const arrowStyle = { x, y, width: size, height: size };
    const innerArrowStyle = {};
    const isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
    if (primaryPlacement) {
      arrowStyle[isVertical ? "width" : "height"] = size * 2;
      const oppSide = opposites[primaryPlacement];
      if (oppSide) {
        arrowStyle[oppSide] = -size;
        innerArrowStyle[oppSide] = size / 2;
      }
      if (oppSide === "top" || oppSide === "bottom") {
        arrowStyle.left = 0;
      }
      if (oppSide === "left" || oppSide === "right") {
        arrowStyle.top = 0;
      }
    }
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      var _a2;
      (_a2 = context.onArrowSize) == null ? void 0 : _a2.call(context, size);
    }, [size, context.onArrowSize]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperArrowOuterFrame, { ref: refs, ...arrowStyle, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      PopperArrowFrame,
      {
        width: size,
        height: size,
        ...arrowProps,
        ...innerArrowStyle,
        rotate: "45deg",
        ...primaryPlacement === "bottom" && {
          borderLeftWidth: borderWidth,
          borderTopWidth: borderWidth
        },
        ...primaryPlacement === "top" && {
          borderBottomWidth: borderWidth,
          borderRightWidth: borderWidth
        },
        ...primaryPlacement === "right" && {
          borderLeftWidth: borderWidth,
          borderBottomWidth: borderWidth
        },
        ...primaryPlacement === "left" && {
          borderTopWidth: borderWidth,
          borderRightWidth: borderWidth
        }
      }
    ) });
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperProvider,
  createPopperScope,
  usePopperContext
});
//# sourceMappingURL=Popper.js.map
