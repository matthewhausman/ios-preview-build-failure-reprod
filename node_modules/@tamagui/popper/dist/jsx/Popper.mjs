import { useComposedRefs } from "@tamagui/compose-refs";
import {
  getVariableValue,
  isWeb,
  styled,
  useIsomorphicLayoutEffect,
  useProps
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import {
  arrow,
  autoUpdate,
  flip,
  offset,
  shift,
  useFloating
} from "@tamagui/floating";
import { stepTokenUpOrDown } from "@tamagui/get-size";
import { ThemeableStack, YStack } from "@tamagui/stacks";
import * as React from "react";
import { Keyboard, useWindowDimensions } from "react-native";
const POPPER_NAME = "Popper";
const [createPopperContext, createScope] = createContextScope(POPPER_NAME);
const createPopperScope = createScope;
const [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
function Popper(props) {
  const {
    __scopePopper,
    children,
    size,
    strategy = "absolute",
    placement = "bottom",
    stayInFrame,
    allowFlip
  } = props;
  const [isMounted, setIsMounted] = React.useState(false);
  useIsomorphicLayoutEffect(() => {
    setIsMounted(true);
  }, []);
  const anchorRef = React.useRef();
  const [arrowEl, setArrow] = React.useState(null);
  const [arrowSize, setArrowSize] = React.useState(0);
  const arrowRef = React.useRef();
  const floating = useFloating({
    strategy,
    placement,
    sameScrollView: false,
    // this only takes effect on native
    middleware: [
      stayInFrame ? shift(typeof stayInFrame === "boolean" ? {} : stayInFrame) : null,
      allowFlip ? flip(typeof allowFlip === "boolean" ? {} : allowFlip) : null,
      arrowEl ? arrow({ element: arrowEl }) : null,
      arrowSize ? offset(arrowSize) : null
    ].filter(Boolean)
  });
  const { refs, middlewareData } = floating;
  const composedArrowRefs = useComposedRefs(arrowRef, setArrow);
  useIsomorphicLayoutEffect(() => {
    floating.reference(anchorRef.current);
  }, [anchorRef]);
  if (isWeb) {
    React.useEffect(() => {
      if (!(refs.reference.current && refs.floating.current)) {
        return;
      }
      return autoUpdate(refs.reference.current, refs.floating.current, floating.update);
    }, [floating.update, refs.floating, refs.reference]);
  } else {
    const dimensions = useWindowDimensions();
    const [keyboardOpen, setKeyboardOpen] = React.useState(false);
    React.useEffect(() => {
      const showSubscription = Keyboard.addListener("keyboardDidShow", () => {
        setKeyboardOpen(true);
      });
      const hideSubscription = Keyboard.addListener("keyboardDidHide", () => {
        setKeyboardOpen(false);
      });
      return () => {
        showSubscription.remove();
        hideSubscription.remove();
      };
    }, []);
    useIsomorphicLayoutEffect(() => {
      floating.update();
    }, [dimensions, keyboardOpen]);
  }
  return <PopperProvider
    scope={__scopePopper}
    anchorRef={anchorRef}
    size={size}
    arrowRef={composedArrowRefs}
    arrowStyle={middlewareData.arrow}
    onArrowSize={setArrowSize}
    isMounted={isMounted}
    {...floating}
  >{children}</PopperProvider>;
}
const ANCHOR_NAME = "PopperAnchor";
const PopperAnchor = YStack.extractable(
  React.forwardRef(function PopperAnchor2(props, forwardedRef) {
    const { __scopePopper, virtualRef, ...anchorProps } = props;
    const { anchorRef, getReferenceProps } = usePopperContext(ANCHOR_NAME, __scopePopper);
    const ref = React.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, anchorRef);
    if (virtualRef) {
      return null;
    }
    const stackProps = {
      ref: composedRefs,
      ...anchorProps
    };
    return <YStack {...getReferenceProps ? getReferenceProps(stackProps) : stackProps} />;
  })
);
const CONTENT_NAME = "PopperContent";
const PopperContentFrame = styled(ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: true
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperContent = React.forwardRef(
  function PopperContent2(props, forwardedRef) {
    const { __scopePopper, ...contentProps } = props;
    const { strategy, placement, floating, x, y, getFloatingProps, size, isMounted } = usePopperContext(CONTENT_NAME, __scopePopper);
    const contentRefs = useComposedRefs(floating, forwardedRef);
    const contents = React.useMemo(() => {
      return <PopperContentFrame
        key="popper-content-frame"
        data-placement={placement}
        data-strategy={strategy}
        size={contentProps.size || size}
        {...contentProps}
      />;
    }, [placement, strategy, props]);
    if (!isMounted) {
      return null;
    }
    const frameProps = {
      ref: contentRefs,
      x: x || 0,
      y: y || 0,
      position: strategy
    };
    return <YStack
      animateOnly={["transform"]}
      {...getFloatingProps ? getFloatingProps(frameProps) : frameProps}
    >{contents}</YStack>;
  }
);
const ARROW_NAME = "PopperArrow";
const PopperArrowFrame = styled(YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperArrowOuterFrame = styled(YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: -1,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
const PopperArrow = PopperArrowFrame.styleable(
  function PopperArrow2(propsIn, forwardedRef) {
    const props = useProps(propsIn);
    const {
      __scopePopper,
      offset: offset2,
      size: sizeProp,
      borderWidth = 0,
      ...arrowProps
    } = props;
    const context = usePopperContext(ARROW_NAME, __scopePopper);
    const sizeVal = sizeProp ?? context.size;
    const sizeValResolved = getVariableValue(stepTokenUpOrDown("space", sizeVal, -2, [2]));
    const size = +sizeValResolved;
    const { placement } = context;
    const refs = useComposedRefs(context.arrowRef, forwardedRef);
    const x = context.arrowStyle?.x || 0;
    const y = context.arrowStyle?.y || 0;
    const primaryPlacement = placement ? placement.split("-")[0] : "top";
    const arrowStyle = { x, y, width: size, height: size };
    const innerArrowStyle = {};
    const isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
    if (primaryPlacement) {
      arrowStyle[isVertical ? "width" : "height"] = size * 2;
      const oppSide = opposites[primaryPlacement];
      if (oppSide) {
        arrowStyle[oppSide] = -size;
        innerArrowStyle[oppSide] = size / 2;
      }
      if (oppSide === "top" || oppSide === "bottom") {
        arrowStyle.left = 0;
      }
      if (oppSide === "left" || oppSide === "right") {
        arrowStyle.top = 0;
      }
    }
    useIsomorphicLayoutEffect(() => {
      context.onArrowSize?.(size);
    }, [size, context.onArrowSize]);
    return <PopperArrowOuterFrame ref={refs} {...arrowStyle}><PopperArrowFrame
      width={size}
      height={size}
      {...arrowProps}
      {...innerArrowStyle}
      rotate="45deg"
      {...primaryPlacement === "bottom" && {
        borderLeftWidth: borderWidth,
        borderTopWidth: borderWidth
      }}
      {...primaryPlacement === "top" && {
        borderBottomWidth: borderWidth,
        borderRightWidth: borderWidth
      }}
      {...primaryPlacement === "right" && {
        borderLeftWidth: borderWidth,
        borderBottomWidth: borderWidth
      }}
      {...primaryPlacement === "left" && {
        borderTopWidth: borderWidth,
        borderRightWidth: borderWidth
      }}
    /></PopperArrowOuterFrame>;
  }
);
export {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperProvider,
  createPopperScope,
  usePopperContext
};
//# sourceMappingURL=Popper.mjs.map
