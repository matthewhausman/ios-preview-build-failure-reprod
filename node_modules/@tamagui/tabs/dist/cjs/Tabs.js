"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Tabs_exports = {};
__export(Tabs_exports, {
  Tabs: () => Tabs
});
module.exports = __toCommonJS(Tabs_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_create_context = require("@tamagui/create-context");
var import_get_button_sized = require("@tamagui/get-button-sized");
var import_group = require("@tamagui/group");
var import_roving_focus = require("@tamagui/roving-focus");
var import_stacks = require("@tamagui/stacks");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var import_use_direction = require("@tamagui/use-direction");
var import_web = require("@tamagui/web");
var React = __toESM(require("react"));
const TAB_LIST_NAME = "TabsList";
const TabsListFrame = (0, import_web.styled)(import_group.Group, {
  name: TAB_LIST_NAME,
  focusable: true
});
const TabsList = TabsListFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, loop = true, children, ...listProps } = props;
      const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_roving_focus.RovingFocusGroup,
        {
          asChild: true,
          orientation: context.orientation,
          dir: context.dir,
          loop,
          ...rovingFocusGroupScope,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            TabsListFrame,
            {
              role: "tablist",
              "aria-orientation": context.orientation,
              ref: forwardedRef,
              axis: context.orientation,
              ...listProps,
              children
            }
          )
        }
      );
    }
  )
);
TabsList.displayName = TAB_LIST_NAME;
const TRIGGER_NAME = "TabsTrigger";
const TabsTriggerFrame = (0, import_web.styled)(import_stacks.ThemeableStack, {
  name: TRIGGER_NAME,
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "nowrap",
  flexDirection: "row",
  cursor: "pointer",
  focusable: true,
  variants: {
    size: {
      "...size": import_get_button_sized.getButtonSized
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    },
    unstyled: {
      false: {
        backgroundColor: "$background",
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const TabsTrigger = TabsTriggerFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeTabs,
        value,
        disabled = false,
        onInteraction,
        ...triggerProps
      } = props;
      const context = useTabsContext(TRIGGER_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      const [layout, setLayout] = React.useState(null);
      const triggerRef = React.useRef(null);
      const groupItemProps = (0, import_group.useGroupItem)({ disabled });
      React.useEffect(() => {
        context.registerTrigger();
        return () => context.unregisterTrigger();
      }, []);
      React.useEffect(() => {
        if (!triggerRef.current || !import_web.isWeb)
          return;
        function getTriggerSize() {
          if (!triggerRef.current)
            return;
          setLayout({
            width: triggerRef.current.offsetWidth,
            height: triggerRef.current.offsetHeight,
            x: triggerRef.current.offsetLeft,
            y: triggerRef.current.offsetTop
          });
        }
        getTriggerSize();
        const observer = new ResizeObserver(getTriggerSize);
        observer.observe(triggerRef.current);
        return () => {
          if (!triggerRef.current)
            return;
          observer.unobserve(triggerRef.current);
        };
      }, [context.triggersCount]);
      React.useEffect(() => {
        if (isSelected && layout) {
          onInteraction == null ? void 0 : onInteraction("select", layout);
        }
      }, [isSelected, value, layout]);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_web.Theme, { name: isSelected ? "active" : null, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_roving_focus.RovingFocusGroup.Item,
        {
          asChild: true,
          ...rovingFocusGroupScope,
          focusable: !disabled,
          active: isSelected,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            TabsTriggerFrame,
            {
              onLayout: (event) => {
                if (!import_web.isWeb) {
                  setLayout(event.nativeEvent.layout);
                }
              },
              onHoverIn: (0, import_web.composeEventHandlers)(props.onHoverIn, () => {
                if (layout) {
                  onInteraction == null ? void 0 : onInteraction("hover", layout);
                }
              }),
              onHoverOut: (0, import_web.composeEventHandlers)(props.onHoverOut, () => {
                onInteraction == null ? void 0 : onInteraction("hover", null);
              }),
              role: "tab",
              "aria-selected": isSelected,
              "aria-controls": contentId,
              "data-state": isSelected ? "active" : "inactive",
              "data-disabled": disabled ? "" : void 0,
              disabled,
              id: triggerId,
              size: context.size,
              ...triggerProps,
              ref: (0, import_web.composeRefs)(forwardedRef, triggerRef),
              onPress: (0, import_web.composeEventHandlers)(props.onPress ?? void 0, (event) => {
                const webChecks = !import_web.isWeb || event.button === 0 && event.ctrlKey === false;
                if (!disabled && !isSelected && webChecks) {
                  context.onChange(value);
                } else {
                  event.preventDefault();
                }
              }),
              ...import_web.isWeb && {
                type: "button",
                onKeyDown: (0, import_web.composeEventHandlers)(
                  props.onKeyDown,
                  (event) => {
                    if ([" ", "Enter"].includes(event.key)) {
                      context.onChange(value);
                      event.preventDefault();
                    }
                  }
                ),
                onFocus: (0, import_web.composeEventHandlers)(props.onFocus, (event) => {
                  if (layout) {
                    onInteraction == null ? void 0 : onInteraction("focus", layout);
                  }
                  const isAutomaticActivation = context.activationMode !== "manual";
                  if (!isSelected && !disabled && isAutomaticActivation) {
                    context.onChange(value);
                  }
                }),
                onBlur: (0, import_web.composeEventHandlers)(props.onFocus, () => {
                  onInteraction == null ? void 0 : onInteraction("focus", null);
                })
              },
              ...groupItemProps
            }
          )
        }
      ) });
    }
  )
);
TabsTrigger.displayName = TRIGGER_NAME;
const CONTENT_NAME = "TabsContent";
const TabsContentFrame = (0, import_web.styled)(import_stacks.ThemeableStack, {
  name: CONTENT_NAME
});
const TabsContent = TabsContentFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
      const context = useTabsContext(CONTENT_NAME, __scopeTabs);
      const isSelected = value === context.value;
      const show = forceMount || isSelected;
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      if (!show)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        TabsContentFrame,
        {
          "data-state": isSelected ? "active" : "inactive",
          "data-orientation": context.orientation,
          role: "tabpanel",
          "aria-labelledby": triggerId,
          hidden: !show,
          id: contentId,
          tabIndex: 0,
          ...contentProps,
          ref: forwardedRef,
          children
        },
        value
      );
    }
  )
);
TabsContent.displayName = CONTENT_NAME;
const TABS_NAME = "Tabs";
const [createTabsContext, createTabsScope] = (0, import_create_context.createContextScope)(TABS_NAME, [
  import_roving_focus.createRovingFocusGroupScope
]);
const useRovingFocusGroupScope = (0, import_roving_focus.createRovingFocusGroupScope)();
const [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
const TabsFrame = (0, import_web.styled)(import_stacks.SizableStack, {
  name: TABS_NAME
});
const Tabs = (0, import_web.withStaticProperties)(
  TabsFrame.extractable(
    React.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeTabs,
          value: valueProp,
          onValueChange,
          defaultValue,
          orientation = "horizontal",
          dir,
          activationMode = "automatic",
          size = "$true",
          ...tabsProps
        } = props;
        const direction = (0, import_use_direction.useDirection)(dir);
        const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
          prop: valueProp,
          onChange: onValueChange,
          defaultProp: defaultValue ?? ""
        });
        const [triggersCount, setTriggersCount] = React.useState(0);
        const registerTrigger = (0, import_web.useEvent)(() => setTriggersCount((v) => v + 1));
        const unregisterTrigger = (0, import_web.useEvent)(() => setTriggersCount((v) => v - 1));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          TabsProvider,
          {
            scope: __scopeTabs,
            baseId: React.useId(),
            value,
            onChange: setValue,
            orientation,
            dir: direction,
            activationMode,
            size,
            registerTrigger,
            triggersCount,
            unregisterTrigger,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              TabsFrame,
              {
                direction,
                "data-orientation": orientation,
                ...tabsProps,
                ref: forwardedRef
              }
            )
          }
        );
      }
    )
  ),
  {
    List: TabsList,
    /**
     * @deprecated Use Tabs.Tab instead
     */
    Trigger: TabsTrigger,
    Tab: TabsTrigger,
    Content: TabsContent
  }
);
Tabs.displayName = TABS_NAME;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tabs
});
//# sourceMappingURL=Tabs.js.map
