import "@tamagui/polyfill-dev";
import {
  FloatingDelayGroup,
  useDelayGroup,
  useDelayGroupContext,
  useDismiss,
  useFloating,
  useFocus,
  useHover,
  useInteractions,
  useRole
} from "@floating-ui/react";
import { useEvent, withStaticProperties } from "@tamagui/core";
import { FloatingOverrideContext } from "@tamagui/floating";
import { stepTokenUpOrDown } from "@tamagui/get-size";
import {
  PopoverAnchor,
  PopoverArrow,
  PopoverContent,
  PopoverTrigger,
  __PopoverProviderInternal,
  usePopoverScope
} from "@tamagui/popover";
import {
  Popper,
  PopperContentFrame,
  usePopperContext
} from "@tamagui/popper";
import * as React from "react";
const TooltipContent = PopperContentFrame.extractable(
  React.forwardRef(
    ({ __scopePopover, ...props }, ref) => {
      const popperScope = usePopoverScope(__scopePopover);
      const popper = usePopperContext("PopperContent", popperScope["__scopePopper"]);
      const padding = props.size || popper.size || stepTokenUpOrDown("size", "$true", -2);
      return <PopoverContent
        componentName="Tooltip"
        disableRemoveScroll
        trapFocus={false}
        padding={padding}
        pointerEvents="none"
        ref={ref}
        {...props}
      />;
    }
  )
);
const TooltipArrow = React.forwardRef((props, ref) => {
  return <PopoverArrow componentName="Tooltip" ref={ref} {...props} />;
});
const TooltipGroup = ({ children, delay }) => {
  return <FloatingDelayGroup delay={React.useMemo(() => delay, [JSON.stringify(delay)])}>{children}</FloatingDelayGroup>;
};
const TooltipComponent = React.forwardRef(function Tooltip(props, ref) {
  const {
    __scopePopover,
    children,
    delay: delayProp,
    restMs = typeof delayProp === "undefined" ? 500 : typeof delayProp === "number" ? delayProp : 0,
    onOpenChange: onOpenChangeProp,
    focus,
    ...restProps
  } = props;
  const popperScope = usePopoverScope(__scopePopover);
  const triggerRef = React.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);
  const { delay: delayGroup, setCurrentId } = useDelayGroupContext();
  const delay = delayProp ?? delayGroup;
  const [open, setOpen] = React.useState(false);
  const id = props.groupId;
  const onOpenChange = useEvent((open2) => {
    setOpen(open2);
    if (open2) {
      setCurrentId(id);
    }
    onOpenChangeProp?.(open2);
  });
  const useFloatingFn = (props2) => {
    const floating = useFloating({
      ...props2,
      open,
      onOpenChange
    });
    const { getReferenceProps, getFloatingProps } = useInteractions([
      useHover(floating.context, { delay, restMs }),
      useFocus(floating.context, focus),
      useRole(floating.context, { role: "tooltip" }),
      useDismiss(floating.context),
      useDelayGroup(floating.context, { id })
    ]);
    return {
      ...floating,
      getReferenceProps,
      getFloatingProps
    };
  };
  const useFloatingContext = React.useCallback(useFloatingFn, [id, delay, open]);
  const onCustomAnchorAdd = React.useCallback(() => setHasCustomAnchor(true), []);
  const onCustomAnchorRemove = React.useCallback(() => setHasCustomAnchor(false), []);
  const contentId = React.useId();
  const twoSmallerKey = stepTokenUpOrDown("size", "$true", -2).key;
  const size = `$${twoSmallerKey}`;
  return <FloatingOverrideContext.Provider value={useFloatingContext}>
    {
      /* default tooltip to a smaller size */
    }
    <Popper size={size} allowFlip {...popperScope} {...restProps}><__PopoverProviderInternal
      scope={__scopePopover}
      popperScope={popperScope.__scopePopper}
      contentId={contentId}
      triggerRef={triggerRef}
      sheetBreakpoint={false}
      scopeKey=""
      open={open}
      onOpenChange={setOpen}
      onOpenToggle={voidFn}
      hasCustomAnchor={hasCustomAnchor}
      onCustomAnchorAdd={onCustomAnchorAdd}
      onCustomAnchorRemove={onCustomAnchorRemove}
    >{children}</__PopoverProviderInternal></Popper>
  </FloatingOverrideContext.Provider>;
});
const Tooltip2 = withStaticProperties(TooltipComponent, {
  Anchor: PopoverAnchor,
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Trigger: PopoverTrigger
});
const voidFn = () => {
};
export {
  Tooltip2 as Tooltip,
  TooltipGroup
};
//# sourceMappingURL=Tooltip.js.map
