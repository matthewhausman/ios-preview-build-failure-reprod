import { canUseDOM, invariant } from "react-native-web-internals";
const isPrefixed = (
  // eslint-disable-next-line no-prototype-builtins
  canUseDOM && !document.hasOwnProperty("hidden") && document.hasOwnProperty("webkitHidden")
);
const EVENT_TYPES = ["change", "memoryWarning"];
const VISIBILITY_CHANGE_EVENT = isPrefixed ? "webkitvisibilitychange" : "visibilitychange";
const VISIBILITY_STATE_PROPERTY = isPrefixed ? "webkitVisibilityState" : "visibilityState";
const AppStates = {
  BACKGROUND: "background",
  ACTIVE: "active"
};
class EventEmitter {
  constructor() {
    this.listeners = {};
  }
  addListener(type, handler) {
    this.listeners[type] ??= /* @__PURE__ */ new Set();
    this.listeners[type].add(handler);
  }
  emit(type, state) {
    var _a;
    (_a = this.listeners[type]) == null ? void 0 : _a.forEach((cb) => cb(state));
  }
  removeListener(type, handler) {
    var _a;
    (_a = this.listeners[type]) == null ? void 0 : _a.delete(handler);
  }
}
let hasBoundVisibilityChangeEvent = false;
const changeEmitter = new EventEmitter();
const _AppState = class {
  static get currentState() {
    if (!_AppState.isAvailable) {
      return AppStates.ACTIVE;
    }
    switch (document[VISIBILITY_STATE_PROPERTY]) {
      case "hidden":
      case "prerender":
      case "unloaded":
        return AppStates.BACKGROUND;
      default:
        return AppStates.ACTIVE;
    }
  }
  static addEventListener(type, handler) {
    if (_AppState.isAvailable) {
      invariant(
        EVENT_TYPES.indexOf(type) !== -1,
        'Trying to subscribe to unknown event: "%s"',
        type
      );
      if (type === "change") {
        if (!hasBoundVisibilityChangeEvent) {
          hasBoundVisibilityChangeEvent = true;
          document.addEventListener(
            VISIBILITY_CHANGE_EVENT,
            () => {
              if (changeEmitter) {
                changeEmitter.emit("change", _AppState.currentState);
              }
            },
            false
          );
        }
        return changeEmitter.addListener(type, handler);
      }
    }
  }
};
let AppState = _AppState;
AppState.isAvailable = canUseDOM && document[VISIBILITY_STATE_PROPERTY];
export {
  AppState as default
};
//# sourceMappingURL=index.js.map
