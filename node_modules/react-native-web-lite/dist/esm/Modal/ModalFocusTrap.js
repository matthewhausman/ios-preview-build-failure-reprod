import * as React from "react";
import { StyleSheet, UIManager, canUseDOM } from "react-native-web-internals";
import createElement from "../createElement/index";
import View from "../View";
var FocusBracket = () => {
  return createElement("div", {
    accessibilityRole: "none",
    tabIndex: 0,
    style: styles.focusBracket
  });
};
function attemptFocus(element) {
  if (!canUseDOM) {
    return false;
  }
  try {
    element.focus();
  } catch (e) {
  }
  return document.activeElement === element;
}
function focusFirstDescendant(element) {
  for (var i = 0; i < element.childNodes.length; i++) {
    var child = element.childNodes[i];
    if (attemptFocus(child) || focusFirstDescendant(child)) {
      return true;
    }
  }
  return false;
}
function focusLastDescendant(element) {
  for (var i = element.childNodes.length - 1; i >= 0; i--) {
    var child = element.childNodes[i];
    if (attemptFocus(child) || focusLastDescendant(child)) {
      return true;
    }
  }
  return false;
}
var ModalFocusTrap = (_ref) => {
  var active = _ref.active, children = _ref.children;
  var trapElementRef = React.useRef();
  var focusRef = React.useRef({
    trapFocusInProgress: false,
    lastFocusedElement: null
  });
  React.useEffect(() => {
    if (canUseDOM) {
      var trapFocus = () => {
        if (trapElementRef.current == null || focusRef.current.trapFocusInProgress || !active) {
          return;
        }
        try {
          focusRef.current.trapFocusInProgress = true;
          if (document.activeElement instanceof Node && !trapElementRef.current.contains(document.activeElement)) {
            var hasFocused = focusFirstDescendant(trapElementRef.current);
            if (focusRef.current.lastFocusedElement === document.activeElement) {
              hasFocused = focusLastDescendant(trapElementRef.current);
            }
            if (!hasFocused && trapElementRef.current != null && document.activeElement) {
              UIManager.focus(trapElementRef.current);
            }
          }
        } finally {
          focusRef.current.trapFocusInProgress = false;
        }
        focusRef.current.lastFocusedElement = document.activeElement;
      };
      trapFocus();
      document.addEventListener("focus", trapFocus, true);
      return () => document.removeEventListener("focus", trapFocus, true);
    }
  }, [active]);
  React.useEffect(function() {
    if (canUseDOM) {
      var lastFocusedElementOutsideTrap = document.activeElement;
      return function() {
        if (lastFocusedElementOutsideTrap && document.contains(lastFocusedElementOutsideTrap)) {
          UIManager.focus(lastFocusedElementOutsideTrap);
        }
      };
    }
  }, []);
  return /* @__PURE__ */ React.createElement(
    React.Fragment,
    null,
    /* @__PURE__ */ React.createElement(FocusBracket, null),
    /* @__PURE__ */ React.createElement(
      View,
      {
        ref: trapElementRef
      },
      children
    ),
    /* @__PURE__ */ React.createElement(FocusBracket, null)
  );
};
var ModalFocusTrap_default = ModalFocusTrap;
var styles = StyleSheet.create({
  focusBracket: {
    outlineStyle: "none"
  }
});
export {
  ModalFocusTrap_default as default
};
//# sourceMappingURL=ModalFocusTrap.js.map
