"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var inputHelpers_exports = {};
__export(inputHelpers_exports, {
  inputSizeVariant: () => inputSizeVariant,
  textAreaSizeVariant: () => textAreaSizeVariant
});
module.exports = __toCommonJS(inputHelpers_exports);
var import_core = require("@tamagui/core");
var import_get_button_sized = require("@tamagui/get-button-sized");
var import_get_font_sized = require("@tamagui/get-font-sized");
var import_get_size = require("@tamagui/get-size");
const inputSizeVariant = (val = "$true", extras) => {
  if (extras.props.multiline || extras.props.numberOfLines > 1) {
    return textAreaSizeVariant(val, extras);
  }
  const buttonStyles = (0, import_get_button_sized.getButtonSized)(val, extras);
  const paddingHorizontal = (0, import_get_size.stepTokenUpOrDown)("space", val, -1, [2]);
  const fontStyle = (0, import_get_font_sized.getFontSized)(val, extras);
  if (!import_core.isWeb && fontStyle) {
    delete fontStyle["lineHeight"];
  }
  return {
    ...fontStyle,
    ...buttonStyles,
    paddingHorizontal
  };
};
const textAreaSizeVariant = (val = "$true", extras) => {
  const { props } = extras;
  const buttonStyles = (0, import_get_button_sized.getButtonSized)(val, extras);
  const fontStyle = (0, import_get_font_sized.getFontSized)(val, extras);
  const height = props.numberOfLines ? (props.numberOfLines || 1) * (0, import_core.getVariableValue)(fontStyle.lineHeight) : "auto";
  const paddingVertical = (0, import_get_size.stepTokenUpOrDown)("space", val, -2, [2]);
  const paddingHorizontal = (0, import_get_size.stepTokenUpOrDown)("space", val, -1, [2]);
  return {
    ...buttonStyles,
    ...fontStyle,
    paddingVertical,
    paddingHorizontal,
    height
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  inputSizeVariant,
  textAreaSizeVariant
});
//# sourceMappingURL=inputHelpers.js.map
